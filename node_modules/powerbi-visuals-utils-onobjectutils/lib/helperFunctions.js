"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.equalsSelectionId = exports.debounce = exports.getUniques = exports.isArrayEmpty = exports.isEqual = exports.groupArrayElements = exports.getObjectValues = void 0;
function getObjectValues(obj) {
    if (!obj) {
        return [];
    }
    return Object.keys(obj).map(key => obj[key]);
}
exports.getObjectValues = getObjectValues;
function groupArrayElements(array, func) {
    if (!array) {
        return {};
    }
    // Use reduce to iterate over the array and accumulate an object
    return array.reduce((acc, cur) => {
        // Get the key by applying the function to the current element
        const key = func(cur);
        // If the key already exists in the accumulator, push the current element to the array
        if (acc[key]) {
            acc[key].push(cur);
        }
        else {
            // Otherwise, create a new array with the current element
            acc[key] = [cur];
        }
        // Return the accumulator
        return acc;
    }, {});
}
exports.groupArrayElements = groupArrayElements;
function isEqual(value, other) {
    // Check if the values are strictly equal
    if (value === other) {
        return true;
    }
    // Check if both values are objects
    if (value && other && typeof value === 'object' && typeof other === 'object') {
        const keysA = Object.keys(value);
        const keysB = Object.keys(other);
        // Check if the objects have the same number of properties
        if (keysA.length !== keysB.length) {
            return false;
        }
        // Check if all properties are equal
        for (const key of keysA) {
            if (!isEqual(value[key], other[key])) {
                return false;
            }
        }
        return true;
    }
    return false;
}
exports.isEqual = isEqual;
function isArrayEmpty(array) {
    if (!array || array.length === 0) {
        return true;
    }
    return false;
}
exports.isArrayEmpty = isArrayEmpty;
function getUniques(array, comparator) {
    if (!array) {
        return [];
    }
    return array.reduce((result, current) => {
        if (!result.some(item => comparator(item, current))) {
            result.push(current);
        }
        return result;
    }, []);
}
exports.getUniques = getUniques;
function debounce(func, delay) {
    let timeoutId;
    return function (...args) {
        // eslint-disable-next-line
        const context = this;
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
            func.apply(context, args);
        }, delay);
    };
}
exports.debounce = debounce;
function equalsSelectionId(x, y) {
    // Normalize falsy to null
    x = x || null;
    y = y || null;
    if (x === y)
        return true;
    if (!x !== !y)
        return false;
    return x.equals(y) && y.equals(x);
}
exports.equalsSelectionId = equalsSelectionId;
//# sourceMappingURL=helperFunctions.js.map