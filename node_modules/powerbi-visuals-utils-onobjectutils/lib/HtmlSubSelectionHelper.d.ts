import powerbi from "powerbi-visuals-api";
import { CreateVisualSubSelectionFromObjectArgs, HtmlSubselectionHelperArgs, HtmlSubSelectionSource, ISubSelectionHelper, SubSelectionElementData } from "./types";
import CustomVisualSubSelection = powerbi.visuals.CustomVisualSubSelection;
import SubSelectionOutlineVisibility = powerbi.visuals.SubSelectionOutlineVisibility;
import SubSelectionRegionOutlineFragment = powerbi.visuals.SubSelectionRegionOutlineFragment;
import SubSelectionStylesType = powerbi.visuals.SubSelectionStylesType;
import SubSelectionRegionOutline = powerbi.visuals.SubSelectionRegionOutline;
import SubSelectionRegionOutlineId = powerbi.visuals.SubSelectionRegionOutlineId;
type HelperSubSelectionRegionOutline<TOutline extends SubSelectionRegionOutline = SubSelectionRegionOutline> = TOutline & {
    id: SubSelectionRegionOutlineId;
};
export declare const DirectEditPlaceholderClassAndSelector: ClassAndSelector;
export declare const DirectEditPlaceholderOutlineClassAndSelector: ClassAndSelector;
export declare const FormatModeAttribute = "format-mode";
export declare const HtmlSubSelectableClass: string;
export declare const HtmlSubSelectableSelector: string;
export declare const SubSelectableDisplayNameAttribute = "data-sub-selection-display-name";
export declare const SubSelectableHideOutlineAttribute = "data-sub-selection-hide-outline";
export declare const SubSelectableObjectNameAttribute = "data-sub-selection-object-name";
export declare const SubSelectableAltObjectNameAttribute = "data-sub-selection-alt-object-name";
export declare const SubSelectableTypeAttribute = "data-sub-selection-type";
export declare const SubSelectableDirectEdit = "data-sub-selection-direct-edit";
export declare const SubSelectableSubSelectedAttribute = "data-sub-selection-sub-selected";
export declare const SubSelectableUIAnchorAttribute = "data-sub-selection-ui-anchor";
export declare const SubSelectableRestrictingElementAttribute = "data-sub-selection-restricting-element";
interface ClassAndSelector {
    class: string;
    selector: string;
}
export declare class HtmlSubSelectionHelper implements ISubSelectionHelper<HTMLElement, CustomVisualSubSelection> {
    private readonly host;
    private customOutlineCallback;
    private formatMode;
    private readonly customElementCallback;
    private readonly hostElement;
    private readonly selectionIdCallback;
    private readonly subSelectionMetadataCallback;
    private readonly subSelectionService;
    private subSelectionRegionOutlines;
    private subSelections;
    private scrollSubSelections;
    private scrollDebounce;
    private constructor();
    static createHtmlSubselectionHelper(args: HtmlSubselectionHelperArgs): HtmlSubSelectionHelper;
    setCustomOutlineCallback(customOutlineCallback: (subSelection: CustomVisualSubSelection) => SubSelectionRegionOutlineFragment[]): void;
    destroy(): void;
    setFormatMode(isFormatMode: boolean): void;
    private attachEventHandlers;
    private removeEventHandlers;
    onVisualScroll(): void;
    private onVisualScrollStart;
    private onVisualScrollEnd;
    private onPointerOver;
    clearHoveredOutline(): void;
    private onClick;
    private onContextMenu;
    private subSelectFromEvent;
    private getSubSelectionElementsFromEvent;
    getSubSelectionSourceFromEvent(event: PointerEvent): HtmlSubSelectionSource | undefined;
    private getCreateVisualSubSelectionArgs;
    private getSubSelectionElementsFromSubSelectionSource;
    updateElementOutline(element: HTMLElement, visibility: SubSelectionOutlineVisibility, suppressRender?: boolean): SubSelectionRegionOutlineId;
    updateElementOutlines(elements: HTMLElement[], visibility: SubSelectionOutlineVisibility, suppressRender?: boolean): SubSelectionRegionOutlineId[];
    private getSubSelectionRegionOutline;
    private getRestrictionElement;
    private applyElementRestriction;
    private getRectangleSubSelectionOutline;
    updateRegionOutline(regionOutline: HelperSubSelectionRegionOutline, suppressRender?: boolean): void;
    updateRegionOutlines(regionOutlines: HelperSubSelectionRegionOutline[], suppressRender?: boolean): void;
    getElementsFromSubSelections(subSelections: CustomVisualSubSelection[]): HTMLElement[];
    setSubSelectedStateDOM(subSelections: CustomVisualSubSelection[]): void;
    private isElementSubSelected;
    /**
     * @returns visualSubSelections that matched a custom outline
     */
    updateCustomOutlinesFromSubSelections(subSelections: CustomVisualSubSelection[], visibility?: SubSelectionOutlineVisibility): CustomVisualSubSelection[];
    updateOutlinesFromSubSelectionElements(elementsToUpdate: HTMLElement[], visibility?: SubSelectionOutlineVisibility): void;
    updateOutlinesFromSubSelections(subSelections: CustomVisualSubSelection[], clearExistingOutlines?: boolean, suppressRender?: boolean): void;
    refreshOutlines(): void;
    private setOutline;
    static setDataForElement(el: HTMLElement | SVGElement, data: SubSelectionElementData): void;
    static getDataForElement(el: HTMLElement | SVGElement): SubSelectionElementData;
    hideAllOutlines(suppressRender?: boolean): void;
    getRegionOutline(id: SubSelectionRegionOutlineId): HelperSubSelectionRegionOutline | undefined;
    getRegionOutlines(ids: SubSelectionRegionOutlineId[]): (HelperSubSelectionRegionOutline | undefined)[];
    getAllOutlines(): Record<string, HelperSubSelectionRegionOutline>;
    private renderOutlines;
    private getElementRegionOutlineId;
    getAllSubSelectables(filterType?: SubSelectionStylesType): CustomVisualSubSelection[] | undefined;
    createVisualSubSelectionForSingleObject(createVisualSubSelectionArgs: CreateVisualSubSelectionFromObjectArgs): CustomVisualSubSelection;
    private createSubSelectionFromElement;
    private getDisplayNameFromElement;
    private getSubSelectionTypeFromElement;
    private getSubSelectableElements;
}
export {};
